name: EDK2 Setup and Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  setup-edk2:
    runs-on: windows-2022
    
    steps:
    - name: Checkout EDK2 Setup Scripts
      uses: actions/checkout@v4
      with:
        path: edk2-setup-scripts
        fetch-depth: 0
    
    - name: Checkout EDK2 Repository
      uses: actions/checkout@v4
      with:
        repository: tianocore/edk2
        path: edk2
        submodules: true
    
    - name: Copy Local ACPIPatcherPkg
      run: |
        echo "Copying local ACPIPatcherPkg to edk2 workspace..."
        Copy-Item -Path "edk2-setup-scripts/ACPIPatcherPkg" -Destination "edk2/ACPIPatcherPkg" -Recurse -Force
        echo "ACPIPatcherPkg copied successfully"
        if (Test-Path "edk2/ACPIPatcherPkg/ACPIPatcherPkg.dsc") {
          echo "SUCCESS: ACPIPatcherPkg.dsc found"
        } else {
          echo "WARNING: ACPIPatcherPkg.dsc not found"
          Get-ChildItem "edk2/ACPIPatcherPkg" -Recurse
        }
      shell: pwsh
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install EDK2 Python Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install edk2-pytool-library edk2-pytool-extensions regex
      shell: pwsh
    
    - name: Setup Visual Studio
      uses: microsoft/setup-msbuild@v2
      with:
        vs-version: '17.0'
    
    - name: Install NASM
      run: |
        # Download and install NASM
        $nasmUrl = "https://www.nasm.us/pub/nasm/releasebuilds/2.16.01/win64/nasm-2.16.01-win64.zip"
        $nasmZip = "$env:TEMP\nasm.zip"
        $nasmDir = "C:\NASM"
        
        Write-Host "Downloading NASM..."
        Invoke-WebRequest -Uri $nasmUrl -OutFile $nasmZip
        
        Write-Host "Extracting NASM..."
        Expand-Archive -Path $nasmZip -DestinationPath $env:TEMP
        
        Write-Host "Installing NASM to C:\NASM..."
        New-Item -ItemType Directory -Path $nasmDir -Force
        Copy-Item -Path "$env:TEMP\nasm-2.16.01\*" -Destination $nasmDir -Recurse -Force
        
        Write-Host "Adding NASM to PATH..."
        echo "C:\NASM" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      shell: pwsh
    
    - name: Build BaseTools
      run: |
        cd edk2
        echo "Setting up Visual Studio environment..."
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        
        echo "Setting up Python environment..."
        where python
        set "PYTHON_COMMAND=python"
        python --version
        
        echo "Setting EDK2 environment variables..."
        set "WORKSPACE=%CD%"
        set "EDK_TOOLS_PATH=%CD%\BaseTools"
        set "BASE_TOOLS_PATH=%CD%\BaseTools"
        
        echo "Building BaseTools with Edk2ToolsBuild..."
        cd BaseTools
        python Edk2ToolsBuild.py
        
        if %ERRORLEVEL% neq 0 (
          echo "ERROR: BaseTools build failed"
          exit /b 1
        )
        
        echo "BaseTools build completed successfully"
        cd %WORKSPACE%
      shell: cmd
    
    - name: Build ACPIPatcherPkg
      run: |
        cd edk2
        echo "Setting up EDK2 environment..."
        call edksetup.bat
        
        echo "Verifying ACPIPatcherPkg is available..."
        if exist "ACPIPatcherPkg\ACPIPatcherPkg.dsc" (
          echo "SUCCESS: ACPIPatcherPkg.dsc found"
          
          echo "=== Building DEBUG versions ==="
          echo "Building ACPIPatcherPkg DEBUG for X64 architecture..."
          build -a X64 -b DEBUG -t VS2022 -p ACPIPatcherPkg/ACPIPatcherPkg.dsc
          if %ERRORLEVEL% neq 0 (
            echo "ERROR: ACPIPatcherPkg X64 DEBUG build failed"
            exit /b 1
          )
          echo "ACPIPatcherPkg X64 DEBUG build completed!"
          
          echo "Building ACPIPatcherPkg DEBUG for IA32 architecture..."
          build -a IA32 -b DEBUG -t VS2022 -p ACPIPatcherPkg/ACPIPatcherPkg.dsc
          if %ERRORLEVEL% neq 0 (
            echo "ERROR: ACPIPatcherPkg IA32 DEBUG build failed"
            exit /b 1
          )
          echo "ACPIPatcherPkg IA32 DEBUG build completed!"
          
          echo "Building ACPIPatcherPkg DEBUG for AARCH64 architecture..."
          build -a AARCH64 -b DEBUG -t VS2022 -p ACPIPatcherPkg/ACPIPatcherPkg.dsc
          if %ERRORLEVEL% neq 0 (
            echo "ERROR: ACPIPatcherPkg AARCH64 DEBUG build failed"
            exit /b 1
          )
          echo "ACPIPatcherPkg AARCH64 DEBUG build completed!"
          
          echo "=== Building RELEASE versions ==="
          echo "Building ACPIPatcherPkg RELEASE for X64 architecture..."
          build -a X64 -b RELEASE -t VS2022 -p ACPIPatcherPkg/ACPIPatcherPkg.dsc
          if %ERRORLEVEL% neq 0 (
            echo "ERROR: ACPIPatcherPkg X64 RELEASE build failed"
            exit /b 1
          )
          echo "ACPIPatcherPkg X64 RELEASE build completed!"
          
          echo "Building ACPIPatcherPkg RELEASE for IA32 architecture..."
          build -a IA32 -b RELEASE -t VS2022 -p ACPIPatcherPkg/ACPIPatcherPkg.dsc
          if %ERRORLEVEL% neq 0 (
            echo "ERROR: ACPIPatcherPkg IA32 RELEASE build failed"
            exit /b 1
          )
          echo "ACPIPatcherPkg IA32 RELEASE build completed!"
          
          echo "Building ACPIPatcherPkg RELEASE for AARCH64 architecture..."
          build -a AARCH64 -b RELEASE -t VS2022 -p ACPIPatcherPkg/ACPIPatcherPkg.dsc
          if %ERRORLEVEL% neq 0 (
            echo "ERROR: ACPIPatcherPkg AARCH64 RELEASE build failed"
            exit /b 1
          )
          echo "ACPIPatcherPkg AARCH64 RELEASE build completed!"
          
          echo "All architecture builds (DEBUG + RELEASE) completed successfully!"
        ) else (
          echo "ERROR: ACPIPatcherPkg.dsc not found!"
          dir ACPIPatcherPkg
          exit /b 1
        )
      shell: cmd
    
    - name: Verify Build Outputs
      run: |
        cd edk2
        echo "=== Verifying DEBUG build outputs exist ==="
        
        # Check X64 DEBUG builds
        if (Test-Path "Build/ACPIPatcher/DEBUG_VS2022/X64/ACPIPatcher.efi") {
          echo "✅ Found X64 DEBUG ACPIPatcher.efi"
          Get-Item "Build/ACPIPatcher/DEBUG_VS2022/X64/ACPIPatcher.efi" | Select-Object Name, Length, LastWriteTime
        } else {
          echo "❌ Missing X64 DEBUG ACPIPatcher.efi"
        }
        
        if (Test-Path "Build/ACPIPatcher/DEBUG_VS2022/X64/ACPIPatcherDxe.efi") {
          echo "✅ Found X64 DEBUG ACPIPatcherDxe.efi"
          Get-Item "Build/ACPIPatcher/DEBUG_VS2022/X64/ACPIPatcherDxe.efi" | Select-Object Name, Length, LastWriteTime
        } else {
          echo "❌ Missing X64 DEBUG ACPIPatcherDxe.efi"
        }
        
        # Check IA32 DEBUG builds
        if (Test-Path "Build/ACPIPatcher/DEBUG_VS2022/IA32/ACPIPatcher.efi") {
          echo "✅ Found IA32 DEBUG ACPIPatcher.efi"
          Get-Item "Build/ACPIPatcher/DEBUG_VS2022/IA32/ACPIPatcher.efi" | Select-Object Name, Length, LastWriteTime
        } else {
          echo "❌ Missing IA32 DEBUG ACPIPatcher.efi"
        }
        
        if (Test-Path "Build/ACPIPatcher/DEBUG_VS2022/IA32/ACPIPatcherDxe.efi") {
          echo "✅ Found IA32 DEBUG ACPIPatcherDxe.efi"
          Get-Item "Build/ACPIPatcher/DEBUG_VS2022/IA32/ACPIPatcherDxe.efi" | Select-Object Name, Length, LastWriteTime
        } else {
          echo "❌ Missing IA32 DEBUG ACPIPatcherDxe.efi"
        }
        
        # Check AARCH64 DEBUG builds
        if (Test-Path "Build/ACPIPatcher/DEBUG_VS2022/AARCH64/ACPIPatcher.efi") {
          echo "✅ Found AARCH64 DEBUG ACPIPatcher.efi"
          Get-Item "Build/ACPIPatcher/DEBUG_VS2022/AARCH64/ACPIPatcher.efi" | Select-Object Name, Length, LastWriteTime
        } else {
          echo "❌ Missing AARCH64 DEBUG ACPIPatcher.efi"
        }
        
        if (Test-Path "Build/ACPIPatcher/DEBUG_VS2022/AARCH64/ACPIPatcherDxe.efi") {
          echo "✅ Found AARCH64 DEBUG ACPIPatcherDxe.efi"
          Get-Item "Build/ACPIPatcher/DEBUG_VS2022/AARCH64/ACPIPatcherDxe.efi" | Select-Object Name, Length, LastWriteTime
        } else {
          echo "❌ Missing AARCH64 DEBUG ACPIPatcherDxe.efi"
        }
        
        echo "=== Verifying RELEASE build outputs exist ==="
        
        # Check X64 RELEASE builds
        if (Test-Path "Build/ACPIPatcher/RELEASE_VS2022/X64/ACPIPatcher.efi") {
          echo "✅ Found X64 RELEASE ACPIPatcher.efi"
          Get-Item "Build/ACPIPatcher/RELEASE_VS2022/X64/ACPIPatcher.efi" | Select-Object Name, Length, LastWriteTime
        } else {
          echo "❌ Missing X64 RELEASE ACPIPatcher.efi"
        }
        
        if (Test-Path "Build/ACPIPatcher/RELEASE_VS2022/X64/ACPIPatcherDxe.efi") {
          echo "✅ Found X64 RELEASE ACPIPatcherDxe.efi"
          Get-Item "Build/ACPIPatcher/RELEASE_VS2022/X64/ACPIPatcherDxe.efi" | Select-Object Name, Length, LastWriteTime
        } else {
          echo "❌ Missing X64 RELEASE ACPIPatcherDxe.efi"
        }
        
        # Check IA32 RELEASE builds
        if (Test-Path "Build/ACPIPatcher/RELEASE_VS2022/IA32/ACPIPatcher.efi") {
          echo "✅ Found IA32 RELEASE ACPIPatcher.efi"
          Get-Item "Build/ACPIPatcher/RELEASE_VS2022/IA32/ACPIPatcher.efi" | Select-Object Name, Length, LastWriteTime
        } else {
          echo "❌ Missing IA32 RELEASE ACPIPatcher.efi"
        }
        
        if (Test-Path "Build/ACPIPatcher/RELEASE_VS2022/IA32/ACPIPatcherDxe.efi") {
          echo "✅ Found IA32 RELEASE ACPIPatcherDxe.efi"
          Get-Item "Build/ACPIPatcher/RELEASE_VS2022/IA32/ACPIPatcherDxe.efi" | Select-Object Name, Length, LastWriteTime
        } else {
          echo "❌ Missing IA32 RELEASE ACPIPatcherDxe.efi"
        }
        
        # Check AARCH64 RELEASE builds
        if (Test-Path "Build/ACPIPatcher/RELEASE_VS2022/AARCH64/ACPIPatcher.efi") {
          echo "✅ Found AARCH64 RELEASE ACPIPatcher.efi"
          Get-Item "Build/ACPIPatcher/RELEASE_VS2022/AARCH64/ACPIPatcher.efi" | Select-Object Name, Length, LastWriteTime
        } else {
          echo "❌ Missing AARCH64 RELEASE ACPIPatcher.efi"
        }
        
        if (Test-Path "Build/ACPIPatcher/RELEASE_VS2022/AARCH64/ACPIPatcherDxe.efi") {
          echo "✅ Found AARCH64 RELEASE ACPIPatcherDxe.efi"
          Get-Item "Build/ACPIPatcher/RELEASE_VS2022/AARCH64/ACPIPatcherDxe.efi" | Select-Object Name, Length, LastWriteTime
        } else {
          echo "❌ Missing AARCH64 RELEASE ACPIPatcherDxe.efi"
        }
        
        echo "=== Directory structure ==="
        Get-ChildItem "Build/ACPIPatcher" -Recurse -Name "*.efi"
      shell: pwsh

    - name: Create Release Archive
      run: |
        cd edk2
        echo "Creating release archive with all EFI binaries (DEBUG + RELEASE)..."
        
        # Create release directory structure
        New-Item -ItemType Directory -Path "Release" -Force
        New-Item -ItemType Directory -Path "Release/DEBUG" -Force
        New-Item -ItemType Directory -Path "Release/DEBUG/X64" -Force
        New-Item -ItemType Directory -Path "Release/DEBUG/IA32" -Force
        New-Item -ItemType Directory -Path "Release/DEBUG/AARCH64" -Force
        New-Item -ItemType Directory -Path "Release/RELEASE" -Force
        New-Item -ItemType Directory -Path "Release/RELEASE/X64" -Force
        New-Item -ItemType Directory -Path "Release/RELEASE/IA32" -Force
        New-Item -ItemType Directory -Path "Release/RELEASE/AARCH64" -Force
        
        echo "=== Copying DEBUG binaries ==="
        # Copy X64 DEBUG binaries
        if (Test-Path "Build/ACPIPatcher/DEBUG_VS2022/X64/ACPIPatcher.efi") {
          Copy-Item "Build/ACPIPatcher/DEBUG_VS2022/X64/ACPIPatcher.efi" "Release/DEBUG/X64/ACPIPatcher-DEBUG-X64.efi"
          echo "✅ Copied ACPIPatcher-DEBUG-X64.efi"
        }
        if (Test-Path "Build/ACPIPatcher/DEBUG_VS2022/X64/ACPIPatcherDxe.efi") {
          Copy-Item "Build/ACPIPatcher/DEBUG_VS2022/X64/ACPIPatcherDxe.efi" "Release/DEBUG/X64/ACPIPatcherDxe-DEBUG-X64.efi"
          echo "✅ Copied ACPIPatcherDxe-DEBUG-X64.efi"
        }
        
        # Copy IA32 DEBUG binaries
        if (Test-Path "Build/ACPIPatcher/DEBUG_VS2022/IA32/ACPIPatcher.efi") {
          Copy-Item "Build/ACPIPatcher/DEBUG_VS2022/IA32/ACPIPatcher.efi" "Release/DEBUG/IA32/ACPIPatcher-DEBUG-IA32.efi"
          echo "✅ Copied ACPIPatcher-DEBUG-IA32.efi"
        }
        if (Test-Path "Build/ACPIPatcher/DEBUG_VS2022/IA32/ACPIPatcherDxe.efi") {
          Copy-Item "Build/ACPIPatcher/DEBUG_VS2022/IA32/ACPIPatcherDxe.efi" "Release/DEBUG/IA32/ACPIPatcherDxe-DEBUG-IA32.efi"
          echo "✅ Copied ACPIPatcherDxe-DEBUG-IA32.efi"
        }
        
        # Copy AARCH64 DEBUG binaries
        if (Test-Path "Build/ACPIPatcher/DEBUG_VS2022/AARCH64/ACPIPatcher.efi") {
          Copy-Item "Build/ACPIPatcher/DEBUG_VS2022/AARCH64/ACPIPatcher.efi" "Release/DEBUG/AARCH64/ACPIPatcher-DEBUG-AARCH64.efi"
          echo "✅ Copied ACPIPatcher-DEBUG-AARCH64.efi"
        }
        if (Test-Path "Build/ACPIPatcher/DEBUG_VS2022/AARCH64/ACPIPatcherDxe.efi") {
          Copy-Item "Build/ACPIPatcher/DEBUG_VS2022/AARCH64/ACPIPatcherDxe.efi" "Release/DEBUG/AARCH64/ACPIPatcherDxe-DEBUG-AARCH64.efi"
          echo "✅ Copied ACPIPatcherDxe-DEBUG-AARCH64.efi"
        }
        
        echo "=== Copying RELEASE binaries ==="
        # Copy X64 RELEASE binaries
        if (Test-Path "Build/ACPIPatcher/RELEASE_VS2022/X64/ACPIPatcher.efi") {
          Copy-Item "Build/ACPIPatcher/RELEASE_VS2022/X64/ACPIPatcher.efi" "Release/RELEASE/X64/ACPIPatcher-RELEASE-X64.efi"
          echo "✅ Copied ACPIPatcher-RELEASE-X64.efi"
        }
        if (Test-Path "Build/ACPIPatcher/RELEASE_VS2022/X64/ACPIPatcherDxe.efi") {
          Copy-Item "Build/ACPIPatcher/RELEASE_VS2022/X64/ACPIPatcherDxe.efi" "Release/RELEASE/X64/ACPIPatcherDxe-RELEASE-X64.efi"
          echo "✅ Copied ACPIPatcherDxe-RELEASE-X64.efi"
        }
        
        # Copy IA32 RELEASE binaries
        if (Test-Path "Build/ACPIPatcher/RELEASE_VS2022/IA32/ACPIPatcher.efi") {
          Copy-Item "Build/ACPIPatcher/RELEASE_VS2022/IA32/ACPIPatcher.efi" "Release/RELEASE/IA32/ACPIPatcher-RELEASE-IA32.efi"
          echo "✅ Copied ACPIPatcher-RELEASE-IA32.efi"
        }
        if (Test-Path "Build/ACPIPatcher/RELEASE_VS2022/IA32/ACPIPatcherDxe.efi") {
          Copy-Item "Build/ACPIPatcher/RELEASE_VS2022/IA32/ACPIPatcherDxe.efi" "Release/RELEASE/IA32/ACPIPatcherDxe-RELEASE-IA32.efi"
          echo "✅ Copied ACPIPatcherDxe-RELEASE-IA32.efi"
        }
        
        # Copy AARCH64 RELEASE binaries
        if (Test-Path "Build/ACPIPatcher/RELEASE_VS2022/AARCH64/ACPIPatcher.efi") {
          Copy-Item "Build/ACPIPatcher/RELEASE_VS2022/AARCH64/ACPIPatcher.efi" "Release/RELEASE/AARCH64/ACPIPatcher-RELEASE-AARCH64.efi"
          echo "✅ Copied ACPIPatcher-RELEASE-AARCH64.efi"
        }
        if (Test-Path "Build/ACPIPatcher/RELEASE_VS2022/AARCH64/ACPIPatcherDxe.efi") {
          Copy-Item "Build/ACPIPatcher/RELEASE_VS2022/AARCH64/ACPIPatcherDxe.efi" "Release/RELEASE/AARCH64/ACPIPatcherDxe-RELEASE-AARCH64.efi"
          echo "✅ Copied ACPIPatcherDxe-RELEASE-AARCH64.efi"
        }
        
        # Create ZIP archives
        Compress-Archive -Path "Release/DEBUG/*" -DestinationPath "ACPIPatcher-DEBUG-AllArchitectures.zip" -Force
        echo "✅ Created ACPIPatcher-DEBUG-AllArchitectures.zip"
        
        Compress-Archive -Path "Release/RELEASE/*" -DestinationPath "ACPIPatcher-RELEASE-AllArchitectures.zip" -Force
        echo "✅ Created ACPIPatcher-RELEASE-AllArchitectures.zip"
        
        Compress-Archive -Path "Release/*" -DestinationPath "ACPIPatcher-Complete-AllArchitectures.zip" -Force
        echo "✅ Created ACPIPatcher-Complete-AllArchitectures.zip (DEBUG + RELEASE)"
        
        # Show archive contents
        echo "=== Archive contents ==="
        Get-ChildItem "Release" -Recurse
        
        # Show archive file info
        Get-ChildItem "*.zip" | Select-Object Name, Length, LastWriteTime
      shell: pwsh

    - name: Upload Build Artifacts (if build successful)
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: edk2-build-artifacts
        path: |
          edk2/Build/
          edk2/BaseTools/Bin/
          edk2/Release/
          edk2/ACPIPatcher-AllArchitectures.zip
        retention-days: 7
    
    - name: Generate Version Number
      id: version
      run: |
        # Change to the correct git repository directory
        cd edk2-setup-scripts
        
        # Get the latest release tag
        $latestTag = git tag -l "v*.*.*" | Sort-Object {[version]($_ -replace '^v')} | Select-Object -Last 1
        
        if ($latestTag) {
          Write-Host "Latest tag found: $latestTag"
          # Extract version numbers
          $version = $latestTag -replace '^v'
          $parts = $version -split '\.'
          $major = [int]$parts[0]
          $minor = [int]$parts[1]
          $patch = [int]$parts[2]
          
          # Increment patch version for new release
          $patch++
          $newVersion = "$major.$minor.$patch"
        } else {
          Write-Host "No previous tags found, starting with v1.0.0"
          $newVersion = "1.0.0"
        }
        
        Write-Host "New version will be: v$newVersion"
        echo "version=$newVersion" >> $env:GITHUB_OUTPUT
        echo "tag=v$newVersion" >> $env:GITHUB_OUTPUT
      shell: pwsh

    - name: Create Release (on workflow dispatch)
      if: github.event_name == 'workflow_dispatch' && success()
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        name: EDK2 Setup Scripts ${{ steps.version.outputs.tag }}
        files: |
          edk2/Release/DEBUG/X64/ACPIPatcher-DEBUG-X64.efi
          edk2/Release/DEBUG/X64/ACPIPatcherDxe-DEBUG-X64.efi
          edk2/Release/DEBUG/IA32/ACPIPatcher-DEBUG-IA32.efi
          edk2/Release/DEBUG/IA32/ACPIPatcherDxe-DEBUG-IA32.efi
          edk2/Release/DEBUG/AARCH64/ACPIPatcher-DEBUG-AARCH64.efi
          edk2/Release/DEBUG/AARCH64/ACPIPatcherDxe-DEBUG-AARCH64.efi
          edk2/Release/RELEASE/X64/ACPIPatcher-RELEASE-X64.efi
          edk2/Release/RELEASE/X64/ACPIPatcherDxe-RELEASE-X64.efi
          edk2/Release/RELEASE/IA32/ACPIPatcher-RELEASE-IA32.efi
          edk2/Release/RELEASE/IA32/ACPIPatcherDxe-RELEASE-IA32.efi
          edk2/Release/RELEASE/AARCH64/ACPIPatcher-RELEASE-AARCH64.efi
          edk2/Release/RELEASE/AARCH64/ACPIPatcherDxe-RELEASE-AARCH64.efi
          edk2/ACPIPatcher-DEBUG-AllArchitectures.zip
          edk2/ACPIPatcher-RELEASE-AllArchitectures.zip
          edk2/ACPIPatcher-Complete-AllArchitectures.zip
        body: |
          ## EDK2 Setup Scripts Release ${{ steps.version.outputs.tag }}
          
          **Automated release from GitHub Actions workflow**
          
          ### What's Included
          - ✅ `setup-edk2.bat` - Main EDK2 setup script with CI support
          - ✅ `ACPIPatcherPkg/` - Example UEFI ACPI patcher package
          - ✅ GitHub Actions workflow for automated builds
          - ✅ **EFI Binaries** - Ready-to-use UEFI drivers (X64, IA32, AARCH64)
          
          ### Built EFI Drivers (DEBUG + RELEASE)
          
          **DEBUG Builds** (with debugging symbols and assertions):
          - `ACPIPatcher-DEBUG-X64.efi` - UEFI Application (64-bit Intel/AMD)
          - `ACPIPatcherDxe-DEBUG-X64.efi` - UEFI DXE Driver (64-bit Intel/AMD)
          - `ACPIPatcher-DEBUG-IA32.efi` - UEFI Application (32-bit Intel/AMD)
          - `ACPIPatcherDxe-DEBUG-IA32.efi` - UEFI DXE Driver (32-bit Intel/AMD)
          - `ACPIPatcher-DEBUG-AARCH64.efi` - UEFI Application (64-bit ARM)
          - `ACPIPatcherDxe-DEBUG-AARCH64.efi` - UEFI DXE Driver (64-bit ARM)
          
          **RELEASE Builds** (optimized, production-ready):
          - `ACPIPatcher-RELEASE-X64.efi` - UEFI Application (64-bit Intel/AMD)
          - `ACPIPatcherDxe-RELEASE-X64.efi` - UEFI DXE Driver (64-bit Intel/AMD)
          - `ACPIPatcher-RELEASE-IA32.efi` - UEFI Application (32-bit Intel/AMD)
          - `ACPIPatcherDxe-RELEASE-IA32.efi` - UEFI DXE Driver (32-bit Intel/AMD)
          - `ACPIPatcher-RELEASE-AARCH64.efi` - UEFI Application (64-bit ARM)
          - `ACPIPatcherDxe-RELEASE-AARCH64.efi` - UEFI DXE Driver (64-bit ARM)
          
          **Archives**:
          - `ACPIPatcher-DEBUG-AllArchitectures.zip` - All DEBUG binaries
          - `ACPIPatcher-RELEASE-AllArchitectures.zip` - All RELEASE binaries  
          - `ACPIPatcher-Complete-AllArchitectures.zip` - Complete collection (DEBUG + RELEASE)
          
          ### Validation Status
          - ✅ BaseTools compilation successful
          - ✅ ACPIPatcherPkg build successful (X64, IA32, AARCH64)
          - ✅ Multi-architecture support validated
          - ✅ EFI binaries attached to release
          - ✅ Build artifacts generated
          - ✅ CI/CD workflow validated
          
          ### Usage
          1. Download `setup-edk2.bat` from this repository
          2. Copy to your EDK2 repository root
          3. Run: `setup-edk2.bat` (interactive) or `setup-edk2.bat --ci` (automated)
          
          ### Using the EFI Binaries
          1. Download the appropriate architecture EFI files from this release
          2. Copy to your ESP partition or UEFI boot media
          3. Load via UEFI Shell or boot manager
          
          **Build Time:** ~1-2 minutes (multi-architecture)  
          **Version:** ${{ steps.version.outputs.version }}  
          **Commit:** ${{ github.sha }}  
          **Generated:** ${{ github.event.head_commit.timestamp }}
        draft: false
        prerelease: false
